--ETL for transfer of data from source table to the target table to based on the condition
--Remove the records where path has only one character '/'	Store that data in another file called -- log_rejected table
--If that file already exists, then append otherwise you can create
--For analysis, we focus on the chapters. In this case, we don’t need the records with out having chapters	
--IF you don’t have chapter information, loose that record but store in a different file	Store that data in another file called -- course_log_unwanted table.


create or replace procedure i_learns as
type i_learn_column is table of i_learn%rowtype;
v_columns i_learn_column;
v_course varchar2(100);
v_chapter varchar2(100);
DATE_REJECTED_EXCEPTION EXCEPTION;
 PRAGMA EXCEPTION_INIT(DATE_REJECTED_EXCEPTION, -01843);
 COUNT_NUM NUMBER(1) :=0;


begin 
   select * bulk collect into v_columns from i_learn;
   --
   for i in 1..v_columns.count loop
    BEGIN 
        if v_columns(i).path = '/' then 
           --DBMS_OUTPUT.PUT_LINE( i  ||v_columns(i).id || ' ' || v_columns(i).first_name || ' ' ||
          -- v_columns(i).last_name || ' ' || v_columns(i).path  || ' ' || TO_TIMESTAMP(v_columns(i).timestamp, 'DD-MM-YYYY HH24:MI:SS'));--11
           COUNT_NUM :=1;
                      
           insert into i_learn_log_rejected values(v_columns(i).id,v_columns(i).first_name,
           v_columns(i).last_name ,v_columns(i).last_login,v_columns(i).path, TO_TIMESTAMP(v_columns(i).timestamp, 'DD-MM-YYYY HH24:MI:SS'));
           
          -- RAISE I_LEARN_LOG_REJECTED_EXCEPTION;
    ELSE
        IF regexp_count(v_columns(i).path, '/') = 4 THEN
            COUNT_NUM:=2;
            v_course := substr(v_columns(i).path, instr(v_columns(i).path, '/', 1, 2) + 1, instr(v_columns(i).path, '/', 1, 3) - 1);

            v_chapter := substr(v_columns(i).path, instr(v_columns(i).path, '/', 1, 3) + 1, instr(v_columns(i).path, '/', 1, 4) - 1);--18

            INSERT INTO ilearn_acess (
                acess_date,
                emp_id,
                course_name,
                chapter
            ) VALUES (
                TO_TIMESTAMP(v_columns(i).timestamp, 'DD-MM-YYYY HH24:MI:SS'),
                v_columns(i).id,
                v_course,
                v_chapter
            );
            --RAISE I_LEARN_ACESS_REJECTED_EXCEPTION ;

        ELSE
            COUNT_NUM:=3;
            INSERT INTO course_log_rejected VALUES (
                v_columns(i).id,
                v_columns(i).first_name,
                v_columns(i).last_name,
                v_columns(i).path,
                TO_TIMESTAMP(v_columns(i).timestamp, 'DD-MM-YYYY HH24:MI:SS')
            );
          --  RAISE I_LEARN_COURSE_REJECTED_EXCEPTION ;

        END IF;
END IF;

 EXCEPTION
  WHEN  DATE_REJECTED_EXCEPTION THEN
      IF COUNT_NUM =1 THEN 
         DBMS_OUTPUT.PUT_LINE('ELSE1');
          insert into i_learn_log_rejected values(v_columns(i).id,v_columns(i).first_name,
          v_columns(i).last_name ,v_columns(i).last_login,v_columns(i).path, TO_TIMESTAMP(v_columns(i).timestamp, 'MM-DD-YYYY HH24:MI:SS'));
      CONTINUE;
      
      ELSIF COUNT_NUM =2 THEN 
       DBMS_OUTPUT.PUT_LINE('ELSE2');
        INSERT INTO ilearn_acess (
                acess_date,
                emp_id,
                course_name,
                chapter
            ) VALUES (
                TO_TIMESTAMP(v_columns(i).timestamp, 'MM-DD-YYYY HH24:MI:SS'),
                v_columns(i).id,
                v_course,
                v_chapter
            );
            CONTINUE;
       ELSE
       DBMS_OUTPUT.PUT_LINE('ELSE3');
       INSERT INTO course_log_rejected VALUES (
                v_columns(i).id,
                v_columns(i).first_name,
                v_columns(i).last_name,
                v_columns(i).path,
                TO_TIMESTAMP(v_columns(i).timestamp, 'MM-DD-YYYY HH24:MI:SS')
            );
         CONTINUE;
        END IF;
        WHEN OTHERS THEN 
        DBMS_OUTPUT.PUT_LINE(SQLCODE || ' '|| SQLERRM);
        
END ;
    end loop;
end;
/
--TO_CHAR(v_columns(i).timestamp, 'MM-DD-YYYY HH24:MI:SS')

exec i_learns;